import { buildConfigValidator } from '../validator';
import type { PineconeRecord, RecordMetadata } from './types';
import { Static } from '@sinclair/typebox';
import { VectorOperationsProvider } from './vectorOperationsProvider';
declare const QueryByRecordId: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString;
    vector: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNever>;
    sparseVector: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNever>;
    topK: import("@sinclair/typebox").TNumber;
    includeValues: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    includeMetadata: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    filter: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{}>>;
}>;
declare const QueryByVectorValues: import("@sinclair/typebox").TObject<{
    vector: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>;
    sparseVector: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        indices: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TInteger>;
        values: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>;
    }>>;
    id: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNever>;
    topK: import("@sinclair/typebox").TNumber;
    includeValues: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    includeMetadata: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    filter: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{}>>;
}>;
declare const QuerySchema: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString;
    vector: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNever>;
    sparseVector: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNever>;
    topK: import("@sinclair/typebox").TNumber;
    includeValues: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    includeMetadata: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    filter: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{}>>;
}>, import("@sinclair/typebox").TObject<{
    vector: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>;
    sparseVector: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        indices: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TInteger>;
        values: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>;
    }>>;
    id: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNever>;
    topK: import("@sinclair/typebox").TNumber;
    includeValues: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    includeMetadata: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    filter: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{}>>;
}>]>;
export type QueryByRecordId = Static<typeof QueryByRecordId>;
export type QueryByVectorValues = Static<typeof QueryByVectorValues>;
export type QueryOptions = Static<typeof QuerySchema>;
export interface ScoredPineconeRecord<T extends RecordMetadata = RecordMetadata> extends PineconeRecord<T> {
    score?: number;
}
export type QueryResponse<T extends RecordMetadata = RecordMetadata> = {
    matches?: Array<ScoredPineconeRecord<T>>;
    namespace: string;
};
export declare class QueryCommand<T extends RecordMetadata = RecordMetadata> {
    apiProvider: VectorOperationsProvider;
    namespace: string;
    validator: ReturnType<typeof buildConfigValidator>;
    constructor(apiProvider: any, namespace: any);
    run(query: QueryOptions): Promise<QueryResponse<T>>;
}
export {};
