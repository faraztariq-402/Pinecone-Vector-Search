import { type FetchOptions } from './fetch';
import { type UpdateOptions } from './update';
import { type QueryOptions } from './query';
import { deleteOne } from './deleteOne';
import { deleteMany } from './deleteMany';
import { deleteAll } from './deleteAll';
import { describeIndexStats } from './describeIndexStats';
import type { PineconeConfiguration, RecordMetadata, PineconeRecord } from './types';
export type { PineconeConfiguration, PineconeRecord, RecordId, RecordSparseValues, RecordValues, RecordMetadata, RecordMetadataValue, } from './types';
export { PineconeConfigurationSchema } from './types';
export type { DeleteManyOptions } from './deleteMany';
export type { DeleteOneOptions } from './deleteOne';
export type { DescribeIndexStatsOptions, IndexStatsDescription, IndexStatsNamespaceSummary, } from './describeIndexStats';
export type { FetchOptions, FetchResponse } from './fetch';
export type { UpdateOptions } from './update';
export type { ScoredPineconeRecord, QueryByRecordId, QueryByVectorValues, QueryOptions, QueryResponse, } from './query';
export declare class Index<T extends RecordMetadata = RecordMetadata> {
    private config;
    private target;
    deleteAll: ReturnType<typeof deleteAll>;
    deleteMany: ReturnType<typeof deleteMany>;
    deleteOne: ReturnType<typeof deleteOne>;
    describeIndexStats: ReturnType<typeof describeIndexStats>;
    private _fetchCommand;
    private _queryCommand;
    private _updateCommand;
    private _upsertCommand;
    constructor(indexName: string, config: PineconeConfiguration, namespace?: string);
    namespace(namespace: string): Index<T>;
    upsert(data: Array<PineconeRecord<T>>): Promise<void>;
    fetch(options: FetchOptions): Promise<import("./fetch").FetchResponse<T>>;
    query(options: QueryOptions): Promise<import("./query").QueryResponse<T>>;
    update(options: UpdateOptions<T>): Promise<void>;
}
